{
  "name": "mal",
  "version": "0.2.1",
  "description": "MAL: MongoDB Access Layer. A simple convienence data access layer over the native-node-driver",
  "author": {
    "name": "@daithi44"
  },
  "keywords": [
    "mongoDB",
    "Data Access layer",
    "streaming from mongoDB",
    "convenience methods for mongoDB"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/daithiw44/MAL"
  },
  "contributors": [
    {
      "name": "@daithi44",
      "email": "david.winders@gmail.com"
    }
  ],
  "dependencies": {
    "JSONStream": "0.4.2",
    "mongodb": "1.1.11"
  },
  "engines": {
    "node": ">= 0.8.10"
  },
  "readme": "MAL (Simple MongoDB Access Layer) v0.2\n======================================\n\n\nConvenience methods for access a connecting to, authenticating and querying against a MongoDB instance in Node.\n--------------------------------------------------------------------------------------------\n\nMAL provides an easy way to preform operations on a MongoDB instance.\n[mongodb / node-mongodb-native](https://github.com/mongodb/node-mongodb-native) -- `sits on mongodb / node-mongodb-native function calls`\n\n\tAs a general rule function calls take the format of ('collectionname', ...>>> same rules for params as node-mongodb-native);\n\t*exceptions being the two streams calls where the last parameters are always the writebale stream for streamPipe \n\t\tor readable stream for streamEvents.\n\t** no callback if none is desired but set {safe:false} etc.. same as node-mongodb-native.\n\nTo create and instance of MAL\n\n1. Create a dbSettings object\n--------------------------------\n\t//example dbSettings Object.\n\n\tvar dbsettings = {\n\t\thost: 'host ip or name',\n\t\tport: port number,\n\t\tdb: 'database name',\n\t\toptions: {auto_reconnect: true},\n\t\tusername: '...',\n\t\tpassword: '...'\n\t};\n\n\t//username and password are required only if there is authentication, \n\t//if there is no authentication required remove the properties from the object.\n\n\tvar dbsettings = {\n\t\thost: 'host ip or name',\n\t\tport: port number,\n\t\tdb: 'database name',\n\t\toptions: {auto_reconnect: true}\n\t};\n\n2. var dbManager = new MAL(dbsettings, optionalCallback);\n----------------------------------------------------------------\n\toptionalCallback is a function that is takes an connected mongoDB server as a parameter.\n\n\tNo CallBack required.\n\t----------------------\n\n\tvar dbManager = new MAL(dbsettings);\n\n\tCallback required\n\t------------------\n\n\t//example\n\n\tfunction optionalCallback(db){\n\t  var callback = function(err, collection){\n\t\tcollection.find({status:1}, {id:1..}).toArray(function(error, result) {\n\t\t\tif (error) {\n\t\t\t  console.log(err); \n\t\t\t}\n\t\t\telse {\n\t\t\t\t//do something with result\n\t\t\t}\n\t\t});\n\t  }\n\n\t  db.collection('matches', function(error, collection) {\n\t\tif (error) callback(error);\n\t\telse callback(null, collection);\n\t  });\n\t}\n\n\tvar dbManager = new MAL(dbsettings, optionalCallback);\n\n\tFor another example see in test0.js in tests.\n\n\t`Obvious 'thing' is optionalCallBack doesn't use the MAL class but rather requires the user to get the collection ref \n\tand then preform the method call using node-mongodb-native directly for both.`\n\n3. Function calls\n--------------------------------\n\n\tFunction calls to the MAL instance follow the same pattern as node-mongodb-native the exception being \n\tthat all the first paramater is the name of the collection being queried.\n\n\tThe first parameter is always the collection name, followed by parameters expected by node-mongodb-native\n\n\texample:\n\t\n\t//Assume\n\tvar dbManager = new MAL(dbsettings);\n\tdbManager.find ('col1', {name : 'name'}, {_id:0}, function(err,result){...}); \n\t\n\t//List of calls available in v0.2\n\t.find(collectionName, query, fields, options, callback)\n\t.findOne(collectionName, query, callback) \t\n\t.insert(collection_Name, query, options, callback) \n\t.save = function(collectionName,obj, callback)\n\t.update = function(collectionName, criteria, update, options, callback) \n\t.remove = function(collectionName, criteria, callback)\n\t.findAndModify = function(collection_Name, criteria, sort, update, options, callback)\n\t// for Stream methods last parameters must be the writable or readable streams.\n\t.streamPipe = function(collectionName, query, fields, options, wrStream)\n\t.streamEvents = function(collectionName, query, fields, options, xStream)\n\n4. Streaming Functionality.\n--------------------------------\n\t\n\tMAL provides two streaming methods. (see examples).\n\t\n\t//Assume\n\tvar dbManager = new MAL(dbsettings);\n\n\t a) streamPipe. (see stream in examples)\n\t \t//function(collectionName, query, fields, options, wrStream) {...\n\t\t// the first argument is always a collectionName\n\t\t// the last\n\t \tdbManager.streamPipe('col1',stream);\n\t\t//this calll will return everything from 'col1' \n\t\t//and pipe the results to wrStream where wrStream is a writable stream like response or a tcp socket.\n\n\t b) streamEvents.( see sse in examples);\n\t \t//lets say we are streaming to serversent events.\n\t\t//create a readable stream\n\t\tvar dbStream = new stream.Stream();\n\t\tdbStream.readable = true;\n\t\t//pass it into the streamEvents function\n\t\tdbManager.streamEvents('Col1',dbStream);\n\t\tres.writeHead(200, {\n\t\t  'Content-Type': 'text/event-stream',\n\t\t  'Cache-Control': 'no-cache',\n\t\t  'Connection': 'keep-alive'\n\t\t});\n\t\t//flush headers\n\t\tres.write('');\n\t\t//and listen on events\n\t\tdbStream.on('data', function(data) {\n\t\t  res.write('data: ' + JSON.stringify(data) + '\\r\\n\\r\\n');\n\t\t});\n\t\tdbStream.on('end', function() {\n\t\t  console.log('ended');\n\t\t});\n\nsee 'server sent events' example on [cloudfoundry nodejs using a mongolab mongoDB instance](http://mongodbstreamdemo.cloudfoundry.com/)\nstreaming 4.8mb of tweets to the browser with Server Sent Events.\n\nTo populated data, pulled tweets from a twitter account that has volume tweets and stuck them in a mongoDB at mongolab.\n\n5. ToDo.\n--------------------------------\n\n\t1. Write more tests\n\t2. Write examples\n\t3. Add mapReduce and other calls\n\t4. Take it from there.\n",
  "_id": "mal@0.2.1",
  "_from": "mal@"
}
